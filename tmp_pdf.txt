'use client';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

/** ===== Helpers & palette (JS only, no TS) ===== */
const BRAND = {
  primary: [18, 24, 39],   // #121827
  accent:  [250, 204, 21], // #FACC15
  ink:     [15, 23, 42],
  border:  [224, 224, 224],
  soft:    [246, 247, 251],
};

function brl(v) {
  try {
    return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' })
      .format(Number(v || 0));
  } catch {
    return String(v);
  }
}
function parseBR(x) {
  if (typeof x === 'number') return x;
  if (!x) return 0;
  return Number(String(x).replace(/\./g, '').replace(',', '.')) || Number(x) || 0;
}
function pad2(n) { return String(n).padStart(2, '0'); }

async function loadLogoImage() {
  try {
    if (typeof window === 'undefined') return null;
    const img = new Image();
    img.crossOrigin = 'anonymous';
    return await new Promise((resolve) => {
      img.onload = () => resolve(img);
      img.onerror = () => resolve(null);
      img.src = '/tepinturalogo.png'; // ajuste se necessário
    });
  } catch {
    return null;
  }
}

/**
 * Gera PDF A4 com 2 vias (Cliente/Empresa). Use { duplicate:false } para 1 via.
 * data:
 *  - meta: { type, number, date, validade, seller, pagamento, prazo, status, obs }
 *  - company: { name, tagline, address, contacts }
 *  - client: { name, whatsapp, email }
 *  - vehicle: { marca, modelo, ano, cor, placa, km }
 *  - items: [ { desc, unit, qty }, ... ]
 *  - totals: { discount, addition }
 */
export async function buildPdfA4(data, opts = {}) {
  const duplicate = (opts && 'duplicate' in opts) ? !!opts.duplicate : true;

  const doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });
  const pageW = doc.internal.pageSize.getWidth();   // 210
  const pageH = doc.internal.pageSize.getHeight();  // 297
  const margin = 10;

  // Altura de cada via: metade da página (quando duplicado), com gap para corte.
  const cutGap = 6;
  const slipH = duplicate ? (pageH - (margin * 2) - cutGap) / 2 : (pageH - (margin * 2));

  const logoImg = await loadLogoImage();

  // Via superior
  renderSlip(doc, data, { x: margin, y: margin, w: pageW - margin * 2, h: slipH }, logoImg);

  if (duplicate) {
    // Linha de corte pontilhada
    const cutY = margin + slipH + cutGap / 2;
    if (typeof doc.setLineDash === 'function') {
      doc.setLineDash([1.5, 1.5], 0);
    }
    doc.setDrawColor(170);
    doc.line(margin, cutY, pageW - margin, cutY);
    if (typeof doc.setLineDash === 'function') {
      doc.setLineDash([]);
    }
    doc.setFontSize(8);
    doc.setTextColor(120);
    doc.text('recorte aqui', pageW / 2, cutY - 1.2, { align: 'center' });

    // Via inferior
    renderSlip(
      doc,
      data,
      { x: margin, y: margin + slipH + cutGap, w: pageW - margin * 2, h: slipH },
      logoImg,
      true
    );
  }

  return doc.output('blob');
}

/** Renderiza uma via dentro de (x,y,w,h) */
function renderSlip(doc, data, box, logoImg, isBottom) {
  const x = box.x, y = box.y, w = box.w, h = box.h;
  const innerPad = 6;

  // Moldura sutil
  doc.setDrawColor(...BRAND.border);
  doc.roundedRect(x - 1.5, y - 1.5, w + 3, h + 3, 2, 2);

  // Header
  const headerH = 22;
  doc.setFillColor(...BRAND.primary);
  doc.rect(x, y, w, headerH, 'F');

  let titleX = x + innerPad;
  if (logoImg) {
    const targetH = 13.5;
    const ratio = (logoImg.naturalWidth && logoImg.naturalHeight)
      ? (logoImg.naturalWidth / logoImg.naturalHeight) : 3;
    const targetW = Math.min(36, targetH * ratio);
    doc.addImage(logoImg, 'PNG', x + innerPad, y + 4.5, targetW, targetH, undefined, 'FAST');
    titleX = x + innerPad + targetW + 4;
  }

  const meta = data.meta || {};
  const tipo = String(meta.type || 'ORÇAMENTO').toUpperCase();
  const num = String(meta.number || '');
  const companyName = data.company?.name || 'TE PINTURA AUTOMOTIVA';
  const companyTag  = data.company?.tagline || 'Pintura automotiva • Funilaria • Reparos • Vitrificação';

  doc.setTextColor(...BRAND.accent);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(13);
  doc.text(companyName, titleX, y + 10.5);

  doc.setTextColor(255);
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(8.8);
  doc.text(companyTag, titleX, y + 16);

  const contactsLine = [data.company?.address, data.company?.contacts].filter(Boolean).join(' • ');
  if (contactsLine) {
    doc.text(contactsLine.replace(/\u0007/g, ' • '), x + w - innerPad, y + 16, { align: 'right' });
  }

  // Badge tipo + número
  const badgeW = 52, badgeH = 12;
  doc.setFillColor(255, 255, 255);
  doc.roundedRect(x + w - innerPad - badgeW, y + 4.5, badgeW, badgeH, 2, 2, 'F');

  doc.setTextColor(...BRAND.ink);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(8.5);
  doc.text(tipo, x + w - innerPad - badgeW + 3, y + 9.2);
  doc.setFontSize(11.5);
  doc.text(num, x + w - innerPad - 3, y + 12.5, { align: 'right' });

  // Meta
  const yMeta = y + headerH + 4;
  doc.setDrawColor(...BRAND.border);
  doc.roundedRect(x, yMeta, w, 16, 2, 2);
  doc.setTextColor(...BRAND.ink);
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(9.5);

  doc.text(`Data: ${meta.date || ''}`, x + innerPad, yMeta + 6);
  doc.text(`Validade: ${meta.validade || ''} dias`, x + innerPad, yMeta + 12);
  doc.text(`Atendido por: ${meta.seller || ''}`, x + w - innerPad, yMeta + 6, { align: 'right' });

  const status = (meta.status || '').toString().toUpperCase();
  if (status) {
    doc.setTextColor(...BRAND.primary);
    doc.setFont('helvetica', 'bold');
    doc.text(`Status: ${status}`, x + w - innerPad, yMeta + 12, { align: 'right' });
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(...BRAND.ink);
  }

  // Cliente
  const yClient = yMeta + 20;
  doc.roundedRect(x, yClient, w, 16, 2, 2);
  doc.text(`Cliente: ${data.client?.name || ''}`, x + innerPad, yClient + 6);
  doc.text(`WhatsApp: ${data.client?.whatsapp || ''}`, x + innerPad, yClient + 12);
  doc.text(`E-mail: ${data.client?.email || ''}`, x + w / 2, yClient + 12);

  // Veículo
  const yCar = yClient + 20;
  doc.roundedRect(x, yCar, w, 18, 2, 2);
  const v = data.vehicle || {};
  doc.text(`Veículo: ${v.marca || ''} / ${v.modelo || ''}   Ano: ${v.ano || ''}   Cor: ${v.cor || ''}`, x + innerPad, yCar + 6);
  doc.text(`Placa: ${v.placa || ''}`, x + innerPad, yCar + 12);
  doc.text(`KM: ${v.km || ''}`, x + w - innerPad, yCar + 12, { align: 'right' });
  doc.text(`Cond. Pagto: ${meta.pagamento || ''}`, x + innerPad, yCar + 18);
  doc.text(`Prazo Execução: ${meta.prazo || ''}`, x + w - innerPad, yCar + 18, { align: 'right' });

  // Itens
  const items = Array.isArray(data.items) ? data.items : [];
  const rows = items.map((it, idx) => {
    const q = Number(it && it.qty != null ? it.qty : 1);
    const unit = parseBR(it && it.unit);
    const tot = Math.max(0, q * unit);
    return [pad2(idx + 1), (it && it.desc) || '', q, brl(unit), brl(tot)];
  });

  const tableStartY = yCar + 22;
  autoTable(doc, {
    startY: tableStartY,
    margin: { left: x, right: x },
    head: [['#', 'Descrição do Serviço/Peça', 'Qtd', 'Unit. (R$)', 'Total (R$)']],
    body: rows,
    theme: 'grid',
    styles: {
      fontSize: 9,
      cellPadding: 1.8,
      lineColor: BRAND.border,
      lineWidth: 0.2,
      valign: 'middle'
    },
    headStyles: {
      fillColor: BRAND.soft,
      textColor: BRAND.ink,
      lineColor: BRAND.border,
      lineWidth: 0.2,
      fontStyle: 'bold'
    },
    alternateRowStyles: { fillColor: [250, 250, 250] },
    columnStyles: {
      0: { cellWidth: 9, halign: 'center' },
      2: { cellWidth: 12, halign: 'center' },
      3: { cellWidth: 22, halign: 'right' },
      4: { cellWidth: 24, halign: 'right' }
    },
  });

  // Totais
  const lastTableY = (doc.lastAutoTable && doc.lastAutoTable.finalY) || tableStartY;
  const subtotal = items.reduce((acc, it) => {
    const q = Number(it && it.qty != null ? it.qty : 1);
    const u = parseBR(it && it.unit);
    return acc + q * u;
  }, 0);
  const desconto = parseBR(data.totals && data.totals.discount);
  const acrescimo = parseBR(data.totals && data.totals.addition);
  const total = Math.max(0, subtotal - desconto + acrescimo);

  let yTotals = lastTableY + 4;
  const totalsW = 82;
  const totalsX = x + w - totalsW;

  doc.setDrawColor(...BRAND.border);
  doc.roundedRect(totalsX, yTotals - 3, totalsW, 28, 2, 2);
  doc.setFontSize(9.8);
  doc.setTextColor(...BRAND.ink);
  doc.text(`Subtotal: ${brl(subtotal)}`, totalsX + totalsW - innerPad, yTotals, { align: 'right' });
  doc.text(`Desconto: ${brl(desconto)}`,  totalsX + totalsW - innerPad, yTotals + 6, { align: 'right' });
  doc.text(`Acréscimo: ${brl(acrescimo)}`, totalsX + totalsW - innerPad, yTotals + 12, { align: 'right' });

  // Barra TOTAL
  doc.setFillColor(...BRAND.accent);
  doc.rect(totalsX, yTotals + 14, totalsW, 9.5, 'F');
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12.2);
  doc.setTextColor(...BRAND.primary);
  doc.text(`TOTAL: ${brl(total)}`, totalsX + totalsW - innerPad, yTotals + 21.2, { align: 'right' });
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(...BRAND.ink);

  // Observações
  let yObs = yTotals + 32;
  const safeBottom = y + h - 22;
  doc.setFontSize(9.5);
  doc.text('Observações / Condições:', x, yObs);

  const obsText = (meta.obs || '').toString().trim() ||
    '• Valores válidos conforme período informado. • Orçamento não configura OS sem aceite formal do cliente. • Serviços sujeitos à análise de peças e estado da pintura.';
  const wrapped = doc.splitTextToSize(obsText, w);
  doc.setFontSize(8.8);

  const obsBlockMaxY = Math.min(safeBottom - 12, yObs + 22);
  let cursorY = yObs + 5;
  for (const line of wrapped) {
    if (cursorY > obsBlockMaxY) break;
    doc.text(line, x, cursorY);
    cursorY += 4.3;
  }

  // Assinaturas
  const ySign = Math.min(y + h - 16, cursorY + 8);
  doc.setDrawColor(...BRAND.border);
  doc.line(x + 4, ySign, x + w / 2 - 6, ySign);
  doc.text('Assinatura do Cliente', x + 4, ySign + 5);

  doc.line(x + w / 2 + 6, ySign, x + w - 4, ySign);
  doc.text('Visto da Empresa', x + w / 2 + 6, ySign + 5);

  // Rodapé
  doc.setFontSize(8);
  doc.setTextColor(120);
  const leftFoot = `${tipo} nº ${num} — Validade: ${meta.validade || ''} dias.`;
  doc.text(leftFoot, x, y + h - 5.5);
  const rightFoot = (data.company?.contacts || '').toString().replace(/\u0007/g, ' • ');
  if (rightFoot) doc.text(rightFoot, x + w, y + h - 5.5, { align: 'right' });
}

// Backwards-compatible export expected by the app
export async function buildPdf(data) {
  return buildPdfA4(data);
}

export default buildPdf;

